{"version":3,"sources":["components/triviaQuestion/index.js","scene/Quiz/index.js"],"names":["TriviaQuestion","props","submitStatus","onChange","trivia","useState","isFormSubmitted","updateFormState","useEffect","list","unescapeHTML","html","escapeEl","document","createElement","innerHTML","textContent","onOptionSelect","e","target","name","id","className","question","incorrect_answers","correct_answer","map","item","index","key","type","htmlFor","TriviaGame","questionList","setQuestionList","status","updateStatus","answers","setAnswer","report","setReport","isSubmit","setSubmitStatus","fetchQuestions","axios","get","then","res","data","results","catch","console","log","answer","obj","renderList","disabled","onClick","correctAnswers","filter","correct_answers","length","total","attempted","Object","keys"],"mappings":"kMAiDeA,MA9Cf,SAAwBC,GAAQ,IAEtBC,EAAmCD,EAAnCC,aAAcC,EAAqBF,EAArBE,SAAUC,EAAWH,EAAXG,OAFH,EAIcC,oBAAS,GAJvB,mBAItBC,EAJsB,KAILC,EAJK,KAO7BC,oBAAU,WACRD,EAAgBL,IACf,CAACA,IAIJ,IAYoBO,EAZdC,EAAe,SAACC,GACpB,IAAIC,EAAWC,SAASC,cAAc,YAEtC,OADAF,EAASG,UAAYJ,EACdC,EAASI,aAIZC,EAAiB,SAAAC,GACrBf,EAASe,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,KAenC,OACE,yBAAKC,UAAY,mBACdZ,EAAaN,EAAOmB,UACrB,yBAAKD,UAAU,mBAdCb,EAeFL,EAdF,sBAAOK,EAAKe,mBAAZ,CAA+Bf,EAAKgB,iBAEhCC,IAAI,SAACC,EAAMC,GAC3B,OAAO,yBAAKC,IAAKD,EAAON,UAAS,iCAA4BhB,GAAmBG,EAAKgB,iBAAmBE,GAAQ,mBAC9G,2BAAOxB,SAAUc,EAAgBa,KAAK,QAAQT,GAAIM,EAAOP,KAAMX,EAAKc,WACpE,2BAAOQ,QAASJ,GAAOjB,EAAaiB,W,uBC6D7BK,UAvFf,WAAuB,IAAD,EAEoB3B,mBAAS,MAF7B,mBAEb4B,EAFa,KAECC,EAFD,OAGW7B,mBAAS,GAHpB,mBAGb8B,EAHa,KAGLC,EAHK,OAIS/B,mBAAS,IAJlB,mBAIbgC,EAJa,KAIJC,EAJI,OAKQjC,mBAAS,MALjB,mBAKbkC,EALa,KAKLC,EALK,OAMgBnC,oBAAS,GANzB,mBAMboC,EANa,KAMHC,EANG,KAUpBlC,oBAAU,WACRmC,KACA,IAGF,IAAMA,EAAiB,WACrBP,EAAa,GACbM,GAAgB,GAChBF,EAAU,MAEVI,IAAMC,IAZS,kFAYKC,KAAK,SAAAC,GACvBb,EAAgBa,EAAIC,KAAKC,SACzBb,EAAa,KACZc,MAAM,SAAAhC,GACPkB,GAAc,GACde,QAAQC,IAAIlC,MAcVD,EAAiB,SAACM,EAAU8B,GAChC,IAAIC,EAAMjB,EACViB,EAAI/B,GAAY8B,EAChBf,EAAUgB,IAINC,EAAa,WACjB,OAAOtB,EAAaP,IAAI,SAACtB,EAAQwB,GAC/B,OAAO,kBAAC,EAAD,CAAgB1B,aAAgBuC,EAAUtC,SAAUc,EAAgBY,IAAKD,EAAOxB,OAAUA,OAkBrG,OACE,yBAAKkB,UAAU,oBACb,6BAASA,UAAU,yBArCP,IAAXa,EACM,kBAAC,IAAD,MACW,IAAXA,EACAoB,IACI,qEAqCC,IAAXpB,GACD,6BAASb,UAAU,kBACjB,4BAASkC,SAAYf,EAAUgB,QArBpB,WACf,IAAIH,EAAM,GACNI,EAAiBzB,EAAa0B,OAAO,SAAAhC,GACvC,OAAOA,EAAKF,iBAAmBY,EAAQV,EAAKJ,YAE9C+B,EAAIM,gBAAkBF,EAAeG,OACrCP,EAAIQ,MAAQ7B,EAAa4B,OACzBP,EAAIS,UAAYC,OAAOC,KAAK5B,GAASwB,OACrCrB,EAAUc,GACVZ,GAAgB,KAYZ,UACA,4BAAQc,UAAWf,EAAUgB,QAASd,GAAtC,SAEEJ,GAAU,4CACKA,EAAOqB,gBADZ,MACgCrB,EAAOuB,MADvC,IAC8C,6BAAK,6BADnD,gBAEMvB,EAAOwB,UAFb,WAEgCxB,EAAOuB,MAFvC","file":"static/js/4.6aef303e.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './triviaQuestion.css'\n\nfunction TriviaQuestion(props) {\n  \n  const { submitStatus, onChange, trivia } = props;\n  \n  const [isFormSubmitted, updateFormState] = useState(false);\n\n  \n  useEffect(() => {\n    updateFormState(submitStatus);\n  }, [submitStatus])\n  \n\n\n  const unescapeHTML = (html) => {\n    var escapeEl = document.createElement('textarea');\n    escapeEl.innerHTML = html;\n    return escapeEl.textContent;\n  }\n\n\n  const onOptionSelect = e =>{\n    onChange(e.target.name, e.target.id);\n  }\n\n\n  const getOptions = (list) => {\n    let allOptions = [...list.incorrect_answers, list.correct_answer];\n\n    return allOptions.map((item, index) =>{\n      return <div key={index} className={`flex flex-align-center ${isFormSubmitted && list.correct_answer === item && 'correct-answer'}`}>\n        <input onChange={onOptionSelect} type=\"radio\" id={item}  name={list.question}/>\n        <label htmlFor={item}>{unescapeHTML(item)}</label>\n        </div>\n    });\n  }\n  \n  return (\n    <div className = \"trivia-question\">\n      {unescapeHTML(trivia.question)}\n      <div className=\"trivia-options\">\n        {getOptions(trivia)}\n      </div>\n    </div>\n  )\n}\n\nexport default TriviaQuestion\n","import React, {useEffect, useState} from 'react';\n\nimport Loader from '../../components/loader';\nimport TriviaQuestion from '../../components/triviaQuestion';\nimport axios from 'axios';\n\nimport './quiz.css';\n\nfunction TriviaGame() {\n\n  const [questionList, setQuestionList] = useState(null);\n  const [status, updateStatus] = useState(0);\n  const [answers, setAnswer] = useState({});\n  const [report, setReport] = useState(null);\n  const [isSubmit, setSubmitStatus] = useState(false);\n\n  const BASE_URL = 'https://opentdb.com/api.php?amount=10&category=9&difficulty=easy&type=multiple';\n\n  useEffect(() => {\n    fetchQuestions();\n  },[]);\n\n\n  const fetchQuestions = () => {\n    updateStatus(0);\n    setSubmitStatus(false);\n    setReport(null);\n\n    axios.get(BASE_URL).then(res => {\n      setQuestionList(res.data.results);\n      updateStatus(1);\n    }).catch(e => {\n      updateStatus(-1);\n      console.log(e);\n    })\n  }\n\n\n  const renderScene = () => {\n    if(status === 0){\n      return <Loader />\n    }else if(status === 1){\n      return renderList();\n    }else return <div>Error occured while fetching data..</div>\n  }\n\n\n  const onOptionSelect = (question, answer) =>{\n    let obj = answers;\n    obj[question] = answer;\n    setAnswer(obj);\n  }\n\n\n  const renderList = () => {\n    return questionList.map((trivia, index) => {\n      return <TriviaQuestion submitStatus = {isSubmit} onChange={onOptionSelect} key={index} trivia = {trivia}/>\n    })\n  }\n\n\n  const onSubmit = () => {\n    let obj = {};\n    let correctAnswers = questionList.filter(item => {\n      return item.correct_answer === answers[item.question]\n    });\n    obj.correct_answers = correctAnswers.length;\n    obj.total = questionList.length;\n    obj.attempted = Object.keys(answers).length;\n    setReport(obj);\n    setSubmitStatus(true);\n  }\n\n\n  return (\n    <div className='trivia-container'>\n      <section className='trivia__question-list'>\n        {renderScene()}\n      </section>\n      \n      {status === 1 && \n      <section className='trivia__submit'>\n        <button  disabled = {isSubmit} onClick={onSubmit}>Submit</button>\n        <button disabled={!isSubmit} onClick={fetchQuestions}>Retry</button>\n        {\n          report && <div>\n            Your score: {report.correct_answers} / {report.total} <br/><br/>\n            You answered {report.attempted} out of {report.total} questions.\n          </div>\n        }\n      </section>}\n    </div>\n  )\n}\n\nexport default TriviaGame;"],"sourceRoot":""}