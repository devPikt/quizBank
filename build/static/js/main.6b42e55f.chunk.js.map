{"version":3,"sources":["components/loader/index.js","redux/reducers/rootReducer.js","store.js","components/header/index.js","routes.js","App.js","AppHelper.js","serviceWorker.js","index.js"],"names":["Loader","props","className","rootReducer","combineReducers","loadingBar","loadingBarReducer","store","applyMiddleware","promise","createStore","createStoreWithMiddleware","Header","name","HomePage","lazy","LandingPage","TriviaGame","routes","path","main","exact","connect","state","dispatch","appRoutes","fallback","from","to","render","map","route","index","key","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+FAAA,0BAgBeA,IAbA,SAACC,GACd,OACE,6BAASC,UAAU,wDACjB,yBAAKA,UAAU,gBACb,8BACA,8BACA,8BACA,kC,mDCHOC,EAJKC,YAAgB,CAClCC,WAAYC,sB,iBCJd,gCAIA,IAEaC,EAFqBC,YAAgBC,IAAhBD,CAAyBE,IAEtCC,CAA0BR,I,iOCFhC,SAASS,EAAOX,GAAQ,IAE7BY,EAASZ,EAATY,KAER,OACE,yBAAKX,UAAU,sDACb,2BAAIW,I,qCCPJC,EAAsBC,eAAK,kBAAU,+BACrCC,EAAsBD,eAAK,kBAAU,+BAErCE,EAAsBF,eAAK,kBAAU,qDAwB5BG,EAnBA,SAACjB,GAAD,MAAW,CACxB,CACEkB,KAAM,aACNC,KAAM,kBAAM,kBAACN,EAAab,IAC1BoB,OAAQ,GAEV,CACEF,KAAM,gBACNC,KAAM,kBAAM,kBAACJ,EAAgBf,IAC7BoB,OAAO,GAET,CACEF,KAAM,mBACNC,KAAM,kBAAM,kBAACH,EAAehB,IAC5BoB,OAAO,K,MC6BX,IAIeC,oBAJS,SAACC,GAAD,MCjDY,IDmDT,SAACC,GAAD,MC9Ce,IDgD3BF,CAxCf,SAAarB,GAEX,IAAMwB,EAAYP,EAAOjB,GAgBzB,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAYA,UAAU,eACtB,yBAAKA,UAAU,iBACb,kBAACU,EAAD,CAAQC,KAAK,mBACb,0BAAMX,UAAU,yDACZ,kBAAC,WAAD,CAAUwB,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUL,OAAK,EAACM,KAAK,IAAIC,GAAG,qBAC5B,kBAAC,IAAD,CAAOC,OAAQ,kBApBpBJ,EAAUK,IAAI,SAACC,EAAOC,GAAR,OACnB,kBAAC,IAAD,CACEC,IAAKD,EACLb,KAAMY,EAAMZ,KACZE,MAAOU,EAAMV,MACbQ,OAAQE,EAAMX,mB,QElBFc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASV,OACP,kBAAC,WAAD,CAAUtB,MAAOA,KACf,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJiC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6b42e55f.chunk.js","sourcesContent":["import React from 'react';\nimport './loader.css';\n\nconst Loader = (props) => {\n  return (\n    <section className='loading-container flex flex-center flex-align-center'>\n      <div className='lds-ellipsis'>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </section>\n  );\n};\n\nexport default Loader;","import { combineReducers } from 'redux';\nimport { loadingBarReducer } from 'react-redux-loading-bar';\n\nconst rootReducer = combineReducers({\n  loadingBar: loadingBarReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './redux/reducers/rootReducer';\nimport promise from 'redux-promise';\n\nconst createStoreWithMiddleware = applyMiddleware(promise)(createStore);\n\nexport const store = createStoreWithMiddleware(rootReducer);\n\n","import React from 'react'\n\nimport './header.css';\n\nexport default function Header(props) {\n\n  const { name } = props;\n\n  return (\n    <div className='header-container flex flex-start flex-align-center'>\n      <p>{name}</p>\n    </div>\n  )\n}\n","import React, {lazy} from 'react';\n\n// import components for routing.\nconst HomePage          =   lazy(()   =>   import('./scene/HomePage'));\nconst LandingPage       =   lazy(()   =>   import('./scene/LandingPage'));\n\nconst TriviaGame        =   lazy(()   =>   import('./scene/Quiz'));\n\n\n\n// add route.\nconst routes = (props) => [\n  {\n    path: '/home-page',\n    main: () => <HomePage {...props}/>,\n    exact:  true,\n  },\n  {\n    path: '/landing-page',\n    main: () => <LandingPage {...props}/>,\n    exact: true\n  },\n  {\n    path: '/bank-of-hodlers',\n    main: () => <TriviaGame {...props}/>,\n    exact: true\n  },\n];\n\n\nexport default routes;","import React, {Suspense} from 'react';\n\nimport {\n  Route,\n  Switch,\n  Redirect } from 'react-router-dom';\n\nimport Header from './components/header';\nimport Loader from './components/loader';\nimport LoadingBar from 'react-redux-loading-bar';\n\nimport { connect } from 'react-redux';\n\nimport { appState, appDispatch } from './AppHelper';\n\nimport routes from './routes';\nimport './App.css';\n\nfunction App(props) {\n\n  const appRoutes = routes(props);\n\n\n// dynamic routes added.\n  function renderMainLayout() {\n    return appRoutes.map((route, index) => (\n      <Route\n        key={index}\n        path={route.path}\n        exact={route.exact}\n        render={route.main}>\n      </Route>\n    ));\n  }\n\n\n  return (\n    <div className=\"App\">\n      <LoadingBar className='App-loader'/>\n      <div className='app-container'>\n        <Header name=\"hodlers Trivia\"/>\n        <main className='main-app-container flex flex-center flex-align-center'>\n            <Suspense fallback={<Loader />}>\n              <Switch>\n                <Redirect exact from='/' to='/bank-of-hodlers' />\n                <Route render={() => ( renderMainLayout() )}/>\n              </Switch>\n            </Suspense>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => appState(state);\n\nconst mapDispatchToProps = (dispatch) => appDispatch(dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// import {} from './redux/actions/';\n// import {} from './redux/actions/';\n// import {} from './redux/actions/';\n\n\nexport const appState = (state) => ({\n  // userCounts: state.userReducer.data,\n});\n\n\nexport const appDispatch = (dispatch) => ({\n  // getUsersCount: () => dispatch(getUsersCount())\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}